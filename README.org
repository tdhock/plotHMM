plotHMM: Plot Hidden Markov Models

| [[file:tests/testthat][tests]] | [[https://github.com/tdhock/plotHMM/actions][https://github.com/tdhock/plotHMM/workflows/R-CMD-check/badge.svg]] |

Algorithms for Hidden Markov Models involve recursion over data
points, which can be slow in R. This package provides C++
implementations of these algorithms, with a focus on returning
intermediate results that can be used to create plots/visualizations
that help understand these algorithms.

** Installation

#+BEGIN_SRC R
  if(!requireNamespace("remotes"))install.packages("remotes")
  remotes::install_github("tdhock/plotHMM")
#+END_SRC

** Usage

Algorithms provided are =plotHMM::FUN_interface= where =FUN= is one
of: =forward=, =backward=, =multiply=, =pairwise=, =transition=,
=viterbi=. See help and example pages for more info.

** Timings

R implementations of HMM inference algorithms can be found in
[[file:tests/testthat/test-CRAN-plotHMM.R]]. Using C++ code is about 100x
faster than R code for the forward algorithm.

#+BEGIN_SRC 
Unit: microseconds
 expr     min      lq     mean  median      uq     max neval
    R 15842.4 16088.2 17265.66 16830.2 18657.6 18909.9     5
  C++   149.0   156.2   163.60   164.9   169.2   178.7     5
#+END_SRC

** Related work

- plotHMM was used to create the [[https://github.com/tdhock/cs499-599-fall-2021/raw/main/slides/09-hidden-markov-models.pdf][slides]] for CS499/599 (Unsupervised
  Learning) at Northern Arizona University, Fall 2021.
- depmixS4 supports user-defined emission/response
  distributions. forwardbackward() returns all quantities from Rabiner
  paper (alpha, beta, gamma, xi, sca/lambda, logLike). Also
  depmix(ntimes=vector_of_lengths) can be used to specify separate
  time series. fit(depmix(),emcontrol=em.control(maxit=4)) can be used
  to limit the number of EM iterations. Equal variance constraints can
  apparently be set using the equal argument in the ?fit function, but
  it does not seem to work for the data shown in
  [[file:vignettes/compare_depmixS4.Rmd]]. Also viterbi() returns most
  likely state sequence. Differences: scaling is used (depmixS4)
  rather than log probabilities (plotHMM), R code used for viterbi
  (depmixS4) rather than C++ (plotHMM).
- TODO
